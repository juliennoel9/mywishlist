<?php if (!isset($_SESSION['login'])) : ?>
    <form method="POST" action="<?= $router->pathFor('register') ?>" id="register">
        <?php if (isset($msg)) : ?>
            <?= $msg ?>
        <?php endif; ?>
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Inscription</h3>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="identifiant">Nom d'utilisateur</label>
                        <input required type="text" placeholder="Nom d'utilisateur" name="identifiant" class="form-control" id="identifiant" maxlength="30" autofocus>
                        <div class="invalid-feedback" id="identifiantErr">Invalide</div>
                    </div>
                    <div class="form-group">
                        <label for="prenom">Prénom</label>
                        <input required type="text" placeholder="Prénom" name="prenom" class="form-control" id="prenom" maxlength="40">
                        <div class="invalid-feedback" id="prenomErr">Invalide</div>
                    </div>
                    <div class="form-group">
                        <label for="nom">Nom</label>
                        <input required type="text" placeholder="Nom" name="nom" class="form-control" id="nom" maxlength="40">
                        <div class="invalid-feedback" id="nomErr">Invalide</div>
                    </div>
                    <div class="form-group">
                        <label for="email">Email</label>
                        <input required type="email" placeholder="Votre email" name="email" class="form-control" id="email" maxlength="100">
                        <div class="invalid-feedback" id="emailErr">Invalide</div>
                    </div>
                    <div class="form-group">
                        <label for="password">Mot de passe</label>
                        <div class="input-group">
                            <input required type="password" minlength="8" placeholder="Mot de passe (minimum 8 caractères)" name="password" class="form-control" id="password" maxlength="50">
                            <div class="input-group-append">
                                <button class="input-group-text" onclick="toggleVisibility('password')" type="button" style="outline: none" tabindex="-1"><i class="fas fa-eye"></i></button>
                            </div>
                        </div>
                        <meter value="0" min="-0.2" max="4" id="password-strength-meter" style="display: none"></meter>
                        <div class="font-weight-bold" id="password-security" style="display: none">Niveau de sécurité : </div>
                        <div class="invalid-feedback" id="passwordErr">Invalide</div>
                    </div>
                    <div class="form-group">
                        <label for="confirmPassWord">Confirmez votre mot de passe</label>
                        <div class="input-group">
                            <input required type="password" minlength="8" placeholder="Confirmez votre mot de passe" name="confirmPassWord" class="form-control" id="confirmPassWord" maxlength="50">
                            <div class="input-group-append">
                                <button class="input-group-text" onclick="toggleVisibility('confirmPassWord')" type="button" style="outline: none" tabindex="-1"><i class="fas fa-eye"></i></button>
                            </div>
                        </div>
                    </div>
                    <div id="confirmPassWordErr" class="alert alert-danger" style="display: none">Les deux mots de passe ne correspondent pas.</div>
                    <div class="form-group">Vous avez déjà un compte ? <a href="<?= $router->pathFor('login') ?>">Se connecter</a></div>
                </div>
                <div class="modal-footer">
                    <a class="btn btn-secondary" href="<?= $router->pathFor('home') ?>" role="button">Annuler</a>
                    <button type="submit" class="btn btn-primary">Inscription</button>
                </div>
            </div>
        </div>
        <input type="hidden" name="<?= $csrf['nameKey'] ?>" value="<?= $csrf['name'] ?>">
        <input type="hidden" name="<?= $csrf['valueKey'] ?>" value="<?= $csrf['value'] ?>">
    </form>
<?php else: ?>
    <h1>Vous êtes déjà connecté. Cette page n'est pas disponible.</h1>
    <h4>Si vous voulez créer un nouveau compte, déconnectez vous auparavant.</h4>
<?php endif; ?>

<script src="/public/js/zxcvbn.js"></script>
<script>
    /* pour lancer le check apres 1 sec d'inactivité dans l'input */
    let timer1, timer2, timer3, timer4, timer5, timer6;
    const finishTyping = 1000;
    let pseudo = document.getElementById('identifiant');
    let pseudoErr = document.getElementById('identifiantErr');
    let firstName = document.getElementById('prenom');
    let firstNameErr = document.getElementById('prenomErr');
    let lastName = document.getElementById('nom');
    let lastNameErr = document.getElementById('nomErr');
    let email = document.getElementById('email');
    let emailErr = document.getElementById('emailErr');
    let password = document.getElementById('password');
    let passwordErr = document.getElementById('passwordErr');
    let confirm = document.getElementById('confirmPassWord');
    let confirmErr = document.getElementById('confirmPassWordErr');
    let meter = document.getElementById('password-strength-meter');
    let security = document.getElementById('password-security');
    let icon = document.getElementById('icon');
    const strength = {
        0: {text : 'Très faible', color : 'darkred'},
        1: {text : 'Faible', color : 'orangered'},
        2: {text : 'Moyen', color : 'orange'},
        3: {text : 'Fort', color : 'yellowgreen'},
        4: {text : 'Très fort', color : 'limegreen'}
    };

    pseudo.addEventListener('input', function() {
        clearTimeout(timer1);
        pseudo.className = 'form-control is-pending';
        pseudo.setCustomValidity('');
        timer1 = setTimeout(checkPseudo, finishTyping);
    });
    firstName.addEventListener('input', function() {
        clearTimeout(timer2);
        firstName.className = 'form-control';
        firstName.setCustomValidity('');
        timer2 = setTimeout(checkFirstName, finishTyping);
    });
    lastName.addEventListener('input', function() {
        clearTimeout(timer3);
        lastName.className = 'form-control';
        lastName.setCustomValidity('');
        timer3 = setTimeout(checkLastName, finishTyping);
    });
    email.addEventListener('input', function() {
        clearTimeout(timer4);
        email.className = 'form-control';
        email.setCustomValidity('');
        timer4 = setTimeout(checkEmail, finishTyping);
    });
    password.addEventListener('input', function() {
        clearTimeout(timer5);
        meter.style.display = this.value ? 'inline' : 'none';
        meter.value = zxcvbn(this.value).score;
        security.style.display = this.value ? 'block' : 'none';
        security.innerText = 'Niveau de sécurité : ' + strength[meter.value].text;
        security.style.color = strength[meter.value].color;
        password.className = 'form-control';
        password.setCustomValidity('');
        confirm.className = 'form-control';
        confirm.setCustomValidity('');
        confirmErr.style.display = "none";
        timer5 = setTimeout(checkPassword, finishTyping);
        timer5 = setTimeout(checkConfirm, finishTyping);
    });
    confirm.addEventListener('input', function() {
        clearTimeout(timer6);
        password.className = 'form-control';
        password.setCustomValidity('');
        confirm.className = 'form-control';
        confirm.setCustomValidity('');
        confirmErr.style.display = "none";
        timer6 = setTimeout(checkConfirm, finishTyping);
    });

    function checkPseudo() {
        fetch('/live_check?username=' + encodeURIComponent(pseudo.value))
            .then(response => {
                return response.json();
            })
            .then(data => {
                if (data.valid) {
                    pseudo.className = 'form-control is-valid';
                } else {
                    pseudo.className = 'form-control is-invalid';
                    pseudoErr.innerText = data.error;
                    pseudo.setCustomValidity(data.error);
                }
            })
    }

    function checkFirstName() {
        fetch('/live_check?firstName=' + encodeURIComponent(firstName.value))
            .then(response => {
                return response.json();
            })
            .then(data => {
                if (!data.valid) {
                    firstName.className = 'form-control is-invalid';
                    firstNameErr.innerText = data.error;
                    firstName.setCustomValidity(data.error);
                }
            })
    }

    function checkLastName() {
        fetch('/live_check?lastName=' + encodeURIComponent(lastName.value))
            .then(response => {
                return response.json();
            })
            .then(data => {
                if (!data.valid) {
                    lastName.className = 'form-control is-invalid';
                    lastNameErr.innerText = data.error;
                    lastName.setCustomValidity(data.error);
                }
            })
    }

    function checkEmail() {
        fetch('/live_check?email=' + encodeURIComponent(email.value))
            .then(response => {
                return response.json();
            })
            .then(data => {
                if (!data.valid) {
                    email.className = 'form-control is-invalid';
                    emailErr.innerText = data.error;
                    email.setCustomValidity(data.error);
                }
            })
    }

    function checkPassword() {
        if (password.value.length < 8) {
            password.className = 'form-control is-invalid';
            passwordErr.innerText = 'Veuillez utiliser au moins 8 caractères.';
            password.setCustomValidity(passwordErr.innerText);
        }
    }

    function checkConfirm() {
        if (password.value !== confirm.value && confirm.value) {
            password.className = 'form-control is-invalid';
            password.setCustomValidity('');
            passwordErr.innerText = '';
            confirm.className = 'form-control is-invalid';
            confirm.setCustomValidity('Les deux mots de passe ne correspondent pas.');
            confirmErr.style.display = "block";
        }
    }

    function toggleVisibility($input) {
        $input = document.getElementById($input);
        if ($input.type === 'password') {
            $input.type = 'text';
            $input.nextElementSibling.firstElementChild.firstElementChild.className = 'fas fa-eye-slash';
        } else {
            $input.type = 'password';
            $input.nextElementSibling.firstElementChild.firstElementChild.className = 'fas fa-eye';
        }
    }
</script>